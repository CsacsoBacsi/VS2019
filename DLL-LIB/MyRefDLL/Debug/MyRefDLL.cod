; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	D:\VS2015Projects\DLL-LIB\MyRefDLL\MyRefDLL.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	_main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??_C@_0P@OEIECONO@EXE?5running?4?4?4?$AA@	; `string'
PUBLIC	??_C@_1EE@MPOPJNLD@?$AAD?$AA?3?$AA?2?$AAV?$AAS?$AA2?$AA0?$AA1?$AA5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAD?$AAL?$AAL?$AA?5?$AA?9?$AA?5?$AAL?$AAI?$AAB?$AA?2?$AAD?$AAe?$AAb?$AAu@ ; `string'
PUBLIC	??_C@_1BE@ONHBHCAE@?$AAM?$AAy?$AAD?$AAL?$AAL?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BK@PLNIENEI@?$DPAdd?$EAMyDLLFuncs?$EA1?$EASANNN?$EAZ?$AA@ ; `string'
PUBLIC	??_C@_08JLHJKNMC@a?5?$CL?5b?5?$DN?5?$AA@	; `string'
PUBLIC	??_R0?AVinvalid_argument@std@@@8		; std::invalid_argument `RTTI Type Descriptor'
PUBLIC	??_C@_0BD@GFMDEHCG@Caught?5exception?3?5?$AA@	; `string'
PUBLIC	__real@401c000000000000
PUBLIC	__real@4058c00000000000
EXTRN	_strlen:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryW@4:PROC
EXTRN	__imp__SetDllDirectoryW@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@4058c00000000000
CONST	SEGMENT
__real@4058c00000000000 DQ 04058c00000000000r	; 99
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BD@GFMDEHCG@Caught?5exception?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@GFMDEHCG@Caught?5exception?3?5?$AA@ DB 'Caught exception: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0?AVinvalid_argument@std@@@8
data$r	SEGMENT
??_R0?AVinvalid_argument@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::invalid_argument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVinvalid_argument@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_08JLHJKNMC@a?5?$CL?5b?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_08JLHJKNMC@a?5?$CL?5b?5?$DN?5?$AA@ DB 'a + b = ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PLNIENEI@?$DPAdd?$EAMyDLLFuncs?$EA1?$EASANNN?$EAZ?$AA@
CONST	SEGMENT
??_C@_0BK@PLNIENEI@?$DPAdd?$EAMyDLLFuncs?$EA1?$EASANNN?$EAZ?$AA@ DB '?Add'
	DB	'@MyDLLFuncs@1@SANNN@Z', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@ONHBHCAE@?$AAM?$AAy?$AAD?$AAL?$AAL?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@ONHBHCAE@?$AAM?$AAy?$AAD?$AAL?$AAL?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'M'
	DB	00H, 'y', 00H, 'D', 00H, 'L', 00H, 'L', 00H, '.', 00H, 'd', 00H
	DB	'l', 00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@MPOPJNLD@?$AAD?$AA?3?$AA?2?$AAV?$AAS?$AA2?$AA0?$AA1?$AA5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAD?$AAL?$AAL?$AA?5?$AA?9?$AA?5?$AAL?$AAI?$AAB?$AA?2?$AAD?$AAe?$AAb?$AAu@
CONST	SEGMENT
??_C@_1EE@MPOPJNLD@?$AAD?$AA?3?$AA?2?$AAV?$AAS?$AA2?$AA0?$AA1?$AA5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAD?$AAL?$AAL?$AA?5?$AA?9?$AA?5?$AAL?$AAI?$AAB?$AA?2?$AAD?$AAe?$AAb?$AAu@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'V', 00H, 'S', 00H, '2', 00H, '0', 00H
	DB	'1', 00H, '5', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'D', 00H, 'L', 00H
	DB	'L', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'B'
	DB	00H, '\', 00H, 'D', 00H, 'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OEIECONO@EXE?5running?4?4?4?$AA@
CONST	SEGMENT
??_C@_0P@OEIECONO@EXE?5running?4?4?4?$AA@ DB 'EXE running...', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$_main$2 DD 09H
	DD	FLAT:??_R0?AVinvalid_argument@std@@@8
	DD	0ffffff94H
	DD	FLAT:__catch$_main$0
__unwindtable$_main DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$_main DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$_main$2
__ehfuncinfo$_main DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_main
	DD	01H
	DD	FLAT:__tryblocktable$_main
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 141  : 			{	// test if stream state okay

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 142  : 			return (_Ok);

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 143  : 			}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 130  : 			{	// destroy the object

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

  00042	8b f4		 mov	 esi, esp
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 14		 jne	 SHORT $LN1@sentry

; 133  : 				this->_Myostr._Osfx();

  00058	8b f4		 mov	 esi, esp
  0005a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 134  : 
; 135  :  #else /* _HAS_EXCEPTIONS */
; 136  : 			this->_Myostr._Osfx();
; 137  :  #endif /* _HAS_EXCEPTIONS */
; 138  : 			}

  0006c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 123  : 			{	// construct locking and testing stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 122  : 			: _Sentry_base(_Ostr)

  00042	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00045	50		 push	 eax
  00046	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00055	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00060	8b f4		 mov	 esi, esp
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 6e		 je	 SHORT $LN2@sentry
  00078	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00080	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00083	8b f4		 mov	 esi, esp
  00085	8b ca		 mov	 ecx, edx
  00087	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	85 c0		 test	 eax, eax
  00096	74 4e		 je	 SHORT $LN2@sentry
  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b7	74 2d		 je	 SHORT $LN2@sentry

; 125  : 				_Ostr.tie()->flush();

  000b9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000bc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000be	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000c1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000c4	8b f4		 mov	 esi, esp
  000c6	8b ca		 mov	 ecx, edx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	8b f4		 mov	 esi, esp
  000d7	8b c8		 mov	 ecx, eax
  000d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000df	3b f4		 cmp	 esi, esp
  000e1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@sentry:

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000f1	8b f4		 mov	 esi, esp
  000f3	8b ca		 mov	 ecx, edx
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 127  : 			}

  00108	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0010f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00112	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00115	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011c	59		 pop	 ecx
  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -224						; size = 4
tv86 = -220						; size = 4
tv72 = -220						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 106  : 			{	// destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00021	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 			if (_Myostr.rdbuf() != 0)

  00042	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  0004d	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  0005b	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	85 c0		 test	 eax, eax
  0006f	74 4d		 je	 SHORT $LN3@Sentry_bas

; 108  : 				_Myostr.rdbuf()->_Unlock();

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv86[ebp], ecx
  0007c	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv86[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv86[ebp]
  0008a	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0008d	8b f4		 mov	 esi, esp
  0008f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	89 85 20 ff ff
	ff		 mov	 DWORD PTR tv92[ebp], eax
  000a2	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	8b f4		 mov	 esi, esp
  000ac	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv92[ebp]
  000b2	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b5	ff d0		 call	 eax
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 109  : 			}

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -212						; size = 4
tv87 = -208						; size = 4
tv73 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 100  : 			{	// lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 2c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-212]
  00013	b9 35 00 00 00	 mov	 ecx, 53			; 00000035H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 			: _Myostr(_Ostr)

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 101  : 			if (_Myostr.rdbuf() != 0)

  0002b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00036	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  00044	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00047	8b f4		 mov	 esi, esp
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	85 c0		 test	 eax, eax
  00058	74 4d		 je	 SHORT $LN1@Sentry_bas

; 102  : 				_Myostr.rdbuf()->_Lock();

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv87[ebp], ecx
  00065	8b 95 30 ff ff
	ff		 mov	 edx, DWORD PTR tv87[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv87[ebp]
  00073	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00076	8b f4		 mov	 esi, esp
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv93[ebp], eax
  0008b	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	8b f4		 mov	 esi, esp
  00095	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv93[ebp]
  0009b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009e	ff d0		 call	 eax
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 103  : 			}

  000a7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	81 c4 d4 00 00
	00		 add	 esp, 212		; 000000d4H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 993  : 	{	// insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 994  : 	_Ostr.put(_Ostr.widen('\n'));

  0001e	8b f4		 mov	 esi, esp
  00020	6a 0a		 push	 10			; 0000000aH
  00022	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0002a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002d	8b ca		 mov	 ecx, edx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b f4		 mov	 esi, esp
  0003e	0f b6 c0	 movzx	 eax, al
  00041	50		 push	 eax
  00042	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 995  : 	_Ostr.flush();

  00052	8b f4		 mov	 esi, esp
  00054	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 996  : 	return (_Ostr);

  00064	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 997  : 	}

  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -352						; size = 8
tv342 = -344						; size = 8
tv290 = -340						; size = 4
tv287 = -340						; size = 8
tv285 = -340						; size = 4
tv328 = -336						; size = 8
tv289 = -336						; size = 4
tv284 = -336						; size = 4
tv286 = -332						; size = 4
tv137 = -332						; size = 4
tv288 = -329						; size = 1
tv283 = -329						; size = 1
$T2 = -324						; size = 4
$T3 = -312						; size = 4
$T4 = -300						; size = 4
$T5 = -288						; size = 4
$T6 = -276						; size = 4
__Ok$ = -72						; size = 8
__Pad$ = -56						; size = 8
__Count$ = -40						; size = 8
__State$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 782  : 	{	// insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd a0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-352]
  00021	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 783  : 	typedef char _Elem;
; 784  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 785  : 	ios_base::iostate _State = ios_base::goodbit;

  00041	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 786  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  00048	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length
  00051	83 c4 04	 add	 esp, 4
  00054	33 c9		 xor	 ecx, ecx
  00056	89 45 d8	 mov	 DWORD PTR __Count$[ebp], eax
  00059	89 4d dc	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 787  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  0005c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00064	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00067	8b f4		 mov	 esi, esp
  00069	8b ca		 mov	 ecx, edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv328[ebp], eax
  0007e	89 95 b4 fe ff
	ff		 mov	 DWORD PTR tv328[ebp+4], edx
  00084	83 bd b4 fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp+4], 0
  0008b	7c 79		 jl	 SHORT $LN17@operator
  0008d	7f 09		 jg	 SHORT $LN24@operator
  0008f	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv328[ebp], 0
  00096	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  00098	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0009b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000a0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000a3	8b f4		 mov	 esi, esp
  000a5	8b ca		 mov	 ecx, edx
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ad	3b f4		 cmp	 esi, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv342[ebp], eax
  000ba	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv342[ebp+4], edx
  000c0	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR tv342[ebp+4]
  000c6	3b 45 dc	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000c9	7c 3b		 jl	 SHORT $LN17@operator
  000cb	7f 0b		 jg	 SHORT $LN25@operator
  000cd	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv342[ebp]
  000d3	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000d6	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000d8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000db	8b 02		 mov	 eax, DWORD PTR [edx]
  000dd	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000e0	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000e3	8b f4		 mov	 esi, esp
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	2b 45 d8	 sub	 eax, DWORD PTR __Count$[ebp]
  000f5	1b 55 dc	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000f8	89 85 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  000fe	89 95 a4 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00104	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00106	0f 57 c0	 xorps	 xmm0, xmm0
  00109	66 0f 13 85 a0
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  00111	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00117	89 4d c8	 mov	 DWORD PTR __Pad$[ebp], ecx
  0011a	8b 95 a4 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  00120	89 55 cc	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 788  : 		? 0 : _Ostr.width() - _Count;
; 789  : 	const typename _Myos::sentry _Ok(_Ostr);

  00123	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00126	50		 push	 eax
  00127	8d 4d b8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0012a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0012f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 790  : 
; 791  : 	if (!_Ok)

  00136	8d 4d b8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00139	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0013e	0f b6 c0	 movzx	 eax, al
  00141	85 c0		 test	 eax, eax
  00143	75 0e		 jne	 SHORT $LN8@operator

; 792  : 		_State |= ios_base::badbit;

  00145	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  00148	83 c8 04	 or	 eax, 4
  0014b	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax

; 793  : 	else

  0014e	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 794  : 		{	// state okay, insert
; 795  : 		_TRY_IO_BEGIN

  00153	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 796  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  00157	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0015a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0015f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00162	8b f4		 mov	 esi, esp
  00164	8b ca		 mov	 ecx, edx
  00166	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  0016c	3b f4		 cmp	 esi, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00173	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00179	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0017f	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00184	83 f8 40	 cmp	 eax, 64			; 00000040H
  00187	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 797  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  0018d	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0018f	8b 45 c8	 mov	 eax, DWORD PTR __Pad$[ebp]
  00192	83 e8 01	 sub	 eax, 1
  00195	8b 4d cc	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  00198	83 d9 00	 sbb	 ecx, 0
  0019b	89 45 c8	 mov	 DWORD PTR __Pad$[ebp], eax
  0019e	89 4d cc	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001a1	83 7d cc 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001a5	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001ab	7f 0a		 jg	 SHORT $LN26@operator
  001ad	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001b1	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 798  : 				if (_Traits::eq_int_type(_Traits::eof(),

  001b7	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001ba	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bc	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001bf	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001c2	8b f4		 mov	 esi, esp
  001c4	8b ca		 mov	 ecx, edx
  001c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001cc	3b f4		 cmp	 esi, esp
  001ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d3	88 85 b7 fe ff
	ff		 mov	 BYTE PTR tv283[ebp], al
  001d9	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001dc	8b 08		 mov	 ecx, DWORD PTR [eax]
  001de	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001e1	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001e4	8b f4		 mov	 esi, esp
  001e6	8b ca		 mov	 ecx, edx
  001e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001ee	3b f4		 cmp	 esi, esp
  001f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f5	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv284[ebp], eax
  001fb	8b f4		 mov	 esi, esp
  001fd	0f b6 85 b7 fe
	ff ff		 movzx	 eax, BYTE PTR tv283[ebp]
  00204	50		 push	 eax
  00205	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv284[ebp]
  0020b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00211	3b f4		 cmp	 esi, esp
  00213	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00218	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  0021e	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00224	89 8d ec fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  0022a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0022f	89 85 e0 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00235	8d 95 ec fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  0023b	52		 push	 edx
  0023c	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  00248	83 c4 08	 add	 esp, 8
  0024b	0f b6 c8	 movzx	 ecx, al
  0024e	85 c9		 test	 ecx, ecx
  00250	74 0b		 je	 SHORT $LN12@operator

; 799  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 800  : 					{	// insertion failed, quit
; 801  : 					_State |= ios_base::badbit;

  00252	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  00255	83 c8 04	 or	 eax, 4
  00258	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax

; 802  : 					break;

  0025b	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 803  : 					}
; 804  : 
; 805  : 		if (_State == ios_base::goodbit

  0025d	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 806  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00262	83 7d e8 00	 cmp	 DWORD PTR __State$[ebp], 0
  00266	75 6e		 jne	 SHORT $LN13@operator
  00268	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0026b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00270	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00273	8b f4		 mov	 esi, esp
  00275	8b ca		 mov	 ecx, edx
  00277	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0027d	3b f4		 cmp	 esi, esp
  0027f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00284	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0028a	8b f4		 mov	 esi, esp
  0028c	8b 45 dc	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0028f	50		 push	 eax
  00290	8b 4d d8	 mov	 ecx, DWORD PTR __Count$[ebp]
  00293	51		 push	 ecx
  00294	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00297	52		 push	 edx
  00298	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  0029e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002a4	3b f4		 cmp	 esi, esp
  002a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ab	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  002b1	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp+4], edx
  002b7	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR tv287[ebp]
  002bd	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp]
  002c0	75 0b		 jne	 SHORT $LN27@operator
  002c2	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp+4]
  002c8	3b 4d dc	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002cb	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 807  : 			_State |= ios_base::badbit;

  002cd	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  002d0	83 c8 04	 or	 eax, 4
  002d3	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 808  : 
; 809  : 		if (_State == ios_base::goodbit)

  002d6	83 7d e8 00	 cmp	 DWORD PTR __State$[ebp], 0
  002da	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 810  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  002e0	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002e2	8b 45 c8	 mov	 eax, DWORD PTR __Pad$[ebp]
  002e5	83 e8 01	 sub	 eax, 1
  002e8	8b 4d cc	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002eb	83 d9 00	 sbb	 ecx, 0
  002ee	89 45 c8	 mov	 DWORD PTR __Pad$[ebp], eax
  002f1	89 4d cc	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  002f4	83 7d cc 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  002f8	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  002fe	7f 0a		 jg	 SHORT $LN28@operator
  00300	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00304	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 811  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0030a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0030d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030f	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00312	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00315	8b f4		 mov	 esi, esp
  00317	8b ca		 mov	 ecx, edx
  00319	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0031f	3b f4		 cmp	 esi, esp
  00321	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00326	88 85 b7 fe ff
	ff		 mov	 BYTE PTR tv288[ebp], al
  0032c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0032f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00331	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00334	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00337	8b f4		 mov	 esi, esp
  00339	8b ca		 mov	 ecx, edx
  0033b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00341	3b f4		 cmp	 esi, esp
  00343	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00348	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv289[ebp], eax
  0034e	8b f4		 mov	 esi, esp
  00350	0f b6 85 b7 fe
	ff ff		 movzx	 eax, BYTE PTR tv288[ebp]
  00357	50		 push	 eax
  00358	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv289[ebp]
  0035e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00364	3b f4		 cmp	 esi, esp
  00366	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0036b	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00371	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  00377	89 8d d4 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0037d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00382	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00388	8d 95 d4 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0038e	52		 push	 edx
  0038f	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00395	50		 push	 eax
  00396	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
  0039b	83 c4 08	 add	 esp, 8
  0039e	0f b6 c8	 movzx	 ecx, al
  003a1	85 c9		 test	 ecx, ecx
  003a3	74 0b		 je	 SHORT $LN15@operator

; 812  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 813  : 					{	// insertion failed, quit
; 814  : 					_State |= ios_base::badbit;

  003a5	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  003a8	83 c8 04	 or	 eax, 4
  003ab	89 45 e8	 mov	 DWORD PTR __State$[ebp], eax

; 815  : 					break;

  003ae	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 816  : 					}

  003b0	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 817  : 		_Ostr.width(0);

  003b5	8b f4		 mov	 esi, esp
  003b7	6a 00		 push	 0
  003b9	6a 00		 push	 0
  003bb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003be	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003c3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003c6	8b ca		 mov	 ecx, edx
  003c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003ce	3b f4		 cmp	 esi, esp
  003d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003d5	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 818  : 		_CATCH_IO_(_Ostr)

  003d7	8b f4		 mov	 esi, esp
  003d9	6a 01		 push	 1
  003db	6a 04		 push	 4
  003dd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  003e2	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003e5	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003e8	8b ca		 mov	 ecx, edx
  003ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003f0	3b f4		 cmp	 esi, esp
  003f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003f7	b8 00 00 00 00	 mov	 eax, $LN23@operator
  003fc	c3		 ret	 0
$LN19@operator:
  003fd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00404	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00406	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 819  : 		}
; 820  : 
; 821  : 	_Ostr.setstate(_State);

  0040d	8b f4		 mov	 esi, esp
  0040f	6a 00		 push	 0
  00411	8b 45 e8	 mov	 eax, DWORD PTR __State$[ebp]
  00414	50		 push	 eax
  00415	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00418	8b 11		 mov	 edx, DWORD PTR [ecx]
  0041a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0041d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00420	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00426	3b f4		 cmp	 esi, esp
  00428	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 822  : 	return (_Ostr);

  0042d	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00430	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00436	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0043d	8d 4d b8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00440	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00445	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 823  : 	}

  0044b	52		 push	 edx
  0044c	8b cd		 mov	 ecx, ebp
  0044e	50		 push	 eax
  0044f	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00455	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0045a	58		 pop	 eax
  0045b	5a		 pop	 edx
  0045c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0045f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00466	59		 pop	 ecx
  00467	5f		 pop	 edi
  00468	5e		 pop	 esi
  00469	5b		 pop	 ebx
  0046a	81 c4 60 01 00
	00		 add	 esp, 352		; 00000160H
  00470	3b ec		 cmp	 ebp, esp
  00472	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00477	8b e5		 mov	 esp, ebp
  00479	5d		 pop	 ebp
  0047a	c3		 ret	 0
  0047b	90		 npad	 1
$LN32@operator:
  0047c	01 00 00 00	 DD	 1
  00480	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  00484	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00488	08 00 00 00	 DD	 8
  0048c	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  00490	5f		 DB	 95			; 0000005fH
  00491	4f		 DB	 79			; 0000004fH
  00492	6b		 DB	 107			; 0000006bH
  00493	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 9c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-356]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vs2015projects\dll-lib\myrefdll\myrefdll.cpp
;	COMDAT _main
_TEXT	SEGMENT
_e$2 = -108						; size = 4
_Result$ = -96						; size = 4
_ProcAdd$ = -84						; size = 4
_LibHandle$ = -72					; size = 4
_returnval$ = -60					; size = 8
_b$ = -44						; size = 8
_a$ = -28						; size = 8
__$EHRec$ = -16						; size = 16
_main	PROC						; COMDAT

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_main
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00021	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 23   : 	double a = 7;

  00041	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@401c000000000000
  00049	f2 0f 11 45 e4	 movsd	 QWORD PTR _a$[ebp], xmm0

; 24   : 	double b = 99;

  0004e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4058c00000000000
  00056	f2 0f 11 45 d4	 movsd	 QWORD PTR _b$[ebp], xmm0

; 25   : 	double returnval;
; 26   : 	HINSTANCE LibHandle ;
; 27   : 	MyProc ProcAdd ;
; 28   : 	BOOL Result;
; 29   : 
; 30   : 	cout << "EXE running..." << endl;

  0005b	8b f4		 mov	 esi, esp
  0005d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00062	68 00 00 00 00	 push	 OFFSET ??_C@_0P@OEIECONO@EXE?5running?4?4?4?$AA@
  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00072	83 c4 08	 add	 esp, 8
  00075	8b c8		 mov	 ecx, eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 31   : 
; 32   : 	SetDllDirectory(_T ("D:\\VS2015Projects\\DLL - LIB\\Debug"));

  00084	8b f4		 mov	 esi, esp
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@MPOPJNLD@?$AAD?$AA?3?$AA?2?$AAV?$AAS?$AA2?$AA0?$AA1?$AA5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAD?$AAL?$AAL?$AA?5?$AA?9?$AA?5?$AAL?$AAI?$AAB?$AA?2?$AAD?$AAe?$AAb?$AAu@
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetDllDirectoryW@4
  00091	3b f4		 cmp	 esi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 33   : 	LibHandle = LoadLibrary(_T("MyDLL.dll"));

  00098	8b f4		 mov	 esi, esp
  0009a	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@ONHBHCAE@?$AAM?$AAy?$AAD?$AAL?$AAL?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryW@4
  000a5	3b f4		 cmp	 esi, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ac	89 45 b8	 mov	 DWORD PTR _LibHandle$[ebp], eax

; 34   : 
; 35   : 	if (LibHandle != NULL)

  000af	83 7d b8 00	 cmp	 DWORD PTR _LibHandle$[ebp], 0
  000b3	0f 84 aa 00 00
	00		 je	 $LN2@main

; 36   : 	{
; 37   : 		ProcAdd = (MyProc) GetProcAddress (LibHandle, "?Add@MyDLLFuncs@1@SANNN@Z");

  000b9	8b f4		 mov	 esi, esp
  000bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PLNIENEI@?$DPAdd?$EAMyDLLFuncs?$EA1?$EASANNN?$EAZ?$AA@
  000c0	8b 45 b8	 mov	 eax, DWORD PTR _LibHandle$[ebp]
  000c3	50		 push	 eax
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	89 45 ac	 mov	 DWORD PTR _ProcAdd$[ebp], eax

; 38   : 		// If the function address is valid, call the function.
; 39   : 		if (NULL != ProcAdd)

  000d4	83 7d ac 00	 cmp	 DWORD PTR _ProcAdd$[ebp], 0
  000d8	74 73		 je	 SHORT $LN3@main

; 40   : 		{
; 41   : 			returnval = (ProcAdd)(a, b);

  000da	8b f4		 mov	 esi, esp
  000dc	83 ec 08	 sub	 esp, 8
  000df	f2 0f 10 45 d4	 movsd	 xmm0, QWORD PTR _b$[ebp]
  000e4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000e9	83 ec 08	 sub	 esp, 8
  000ec	f2 0f 10 45 e4	 movsd	 xmm0, QWORD PTR _a$[ebp]
  000f1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000f6	ff 55 ac	 call	 DWORD PTR _ProcAdd$[ebp]
  000f9	83 c4 10	 add	 esp, 16			; 00000010H
  000fc	3b f4		 cmp	 esi, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	dd 5d c4	 fstp	 QWORD PTR _returnval$[ebp]

; 42   : 			cout << "a + b = " << returnval << endl ;

  00106	8b f4		 mov	 esi, esp
  00108	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0010d	8b fc		 mov	 edi, esp
  0010f	83 ec 08	 sub	 esp, 8
  00112	f2 0f 10 45 c4	 movsd	 xmm0, QWORD PTR _returnval$[ebp]
  00117	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011c	68 00 00 00 00	 push	 OFFSET ??_C@_08JLHJKNMC@a?5?$CL?5b?5?$DN?5?$AA@
  00121	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0012c	83 c4 08	 add	 esp, 8
  0012f	8b c8		 mov	 ecx, eax
  00131	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@N@Z
  00137	3b fc		 cmp	 edi, esp
  00139	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013e	8b c8		 mov	 ecx, eax
  00140	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00146	3b f4		 cmp	 esi, esp
  00148	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@main:

; 43   : 		}
; 44   : 		// Free the DLL module.
; 45   : 
; 46   : 		Result = FreeLibrary (LibHandle);

  0014d	8b f4		 mov	 esi, esp
  0014f	8b 45 b8	 mov	 eax, DWORD PTR _LibHandle$[ebp]
  00152	50		 push	 eax
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
  00159	3b f4		 cmp	 esi, esp
  0015b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00160	89 45 a0	 mov	 DWORD PTR _Result$[ebp], eax
$LN2@main:

; 47   : 	}
; 48   : 
; 49   : 	/*cout << "a + b = " <<
; 50   : 		MyDLLFuncs::MyDLLFuncs::Add(a, b) << endl;
; 51   : 	cout << "a - b = " <<
; 52   : 		MyDLLFuncs::MyDLLFuncs::Subtract(a, b) << endl;
; 53   : 	cout << "a * b = " <<
; 54   : 		MyDLLFuncs::MyDLLFuncs::Multiply(a, b) << endl;
; 55   : 	cout << "a / b = " <<
; 56   : 		MyDLLFuncs::MyDLLFuncs::Divide(a, b) << endl;
; 57   : 		*/
; 58   : 	try

  00163	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 59   : 	{
; 60   : 		//cout << "a / 0 = " << "";
; 61   : 			//MyDLLFuncs::MyDLLFuncs::Divide(a, 0) << endl;
; 62   : 	}

  0016a	eb 50		 jmp	 SHORT $LN6@main
__catch$_main$0:

; 63   : 	catch (const invalid_argument &e)
; 64   : 	{
; 65   : 		cout << "Caught exception: " << e.what() << endl;

  0016c	8b f4		 mov	 esi, esp
  0016e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00173	8b 45 94	 mov	 eax, DWORD PTR _e$2[ebp]
  00176	8b 10		 mov	 edx, DWORD PTR [eax]
  00178	8b fc		 mov	 edi, esp
  0017a	8b 4d 94	 mov	 ecx, DWORD PTR _e$2[ebp]
  0017d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00180	ff d0		 call	 eax
  00182	3b fc		 cmp	 edi, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	50		 push	 eax
  0018a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GFMDEHCG@Caught?5exception?3?5?$AA@
  0018f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00195	51		 push	 ecx
  00196	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0019b	83 c4 08	 add	 esp, 8
  0019e	50		 push	 eax
  0019f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001a4	83 c4 08	 add	 esp, 8
  001a7	8b c8		 mov	 ecx, eax
  001a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001af	3b f4		 cmp	 esi, esp
  001b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 66   : 	}

  001b6	b8 00 00 00 00	 mov	 eax, $LN9@main
  001bb	c3		 ret	 0
$LN6@main:
  001bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001c3	eb 07		 jmp	 SHORT $LN8@main
$LN9@main:
  001c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN8@main:

; 67   : 
; 68   : 	return 0;

  001cc	33 c0		 xor	 eax, eax

; 69   : }

  001ce	52		 push	 edx
  001cf	8b cd		 mov	 ecx, ebp
  001d1	50		 push	 eax
  001d2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@main
  001d8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001dd	58		 pop	 eax
  001de	5a		 pop	 edx
  001df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e9	59		 pop	 ecx
  001ea	5f		 pop	 edi
  001eb	5e		 pop	 esi
  001ec	5b		 pop	 ebx
  001ed	81 c4 30 01 00
	00		 add	 esp, 304		; 00000130H
  001f3	3b ec		 cmp	 ebp, esp
  001f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fa	8b e5		 mov	 esp, ebp
  001fc	5d		 pop	 ebp
  001fd	c3		 ret	 0
  001fe	66 90		 npad	 2
$LN13@main:
  00200	01 00 00 00	 DD	 1
  00204	00 00 00 00	 DD	 $LN12@main
$LN12@main:
  00208	94 ff ff ff	 DD	 -108			; ffffff94H
  0020c	04 00 00 00	 DD	 4
  00210	00 00 00 00	 DD	 $LN10@main
$LN10@main:
  00214	65		 DB	 101			; 00000065H
  00215	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$_main:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a cc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-308]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_main
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_main	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 605  : 		{	// return end-of-file metacharacter

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 606  : 		return (EOF);

  0001e	83 c8 ff	 or	 eax, -1

; 607  : 		}

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 594  : 		{	// test for metacharacter equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 595  : 		return (_Left == _Right);

  0001e	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00024	8b 10		 mov	 edx, DWORD PTR [eax]
  00026	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00028	75 0c		 jne	 SHORT $LN3@eq_int_typ
  0002a	c7 85 3c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00034	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00036	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00040	8a 85 3c ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 596  : 		}

  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 522  : 		{	// find length of null-terminated string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 523  : 		return (*_First == 0 ? 0

  0001e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00021	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00024	85 c9		 test	 ecx, ecx
  00026	75 0c		 jne	 SHORT $LN3@length
  00028	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], 0
  00032	eb 12		 jmp	 SHORT $LN4@length
$LN3@length:
  00034	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _strlen
  0003d	83 c4 04	 add	 esp, 4
  00040	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
$LN4@length:
  00046	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vs2015projects\dll-lib\myrefdll\myrefdll.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vs2015projects\dll-lib\myrefdll\myrefdll.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
