; *** Bad syntax ***
;1TooMany								; Begins with a digit
;Hello.There							; Contains a period in the middle of the symbol
;$										; Cannot have $ or ? by itself
;LABEL									; Assembler reserved word
;Right Here								; Symbols cannot contain spaces or other special symbols besides _ ? $ and @

; *** Literals ***
;123d									; Decimal number
;3.14159
;"String Const"
;0FABCh									; Hexa number
;'A'
;<Text Constant>						; E.g. mrax textequ <mov rax,>
; 101101011101b							; Binary number
;'Isn''t it?'							; Special chars
;5.34e+12								; Scientific notation

; *** Equates ***
One				equ     1
Minus1			equ     -1
TryAgain		equ     'Y'
StringEqu		equ     "Hello there"
mova			equ     <mov rax,>
HTString		byte    StringEqu       ; Same as HTString equ "Hello there"

; mova rbx		; Same as mov rax, rbx

; *** Operators ***
; this, equ, dup
WArray          equ     this word		; "this" is the location counter pointing really at BArray
BArray          byte    200 dup (?)
mov     ax, WArray+8					; Does not generate an error (wanting word ptr)

; sizeof, lengthof, type

a1				byte	?				; SIZEOF(a1) = 1
a2				word	?				; SIZEOF(a2) = 2
a4				dword	?				; SIZEOF(a4) = 4
a8				real8	?				; SIZEOF(a8) = 8
ary0			byte	10 dup (0)		; SIZEOF(ary0) = 10
ary1			word	10 dup (10 dup (0))	; SIZEOF(ary1) = 200
ary2			dword	10 dup (0)		; SIZEOF(ary2) = 40

mov		rbx, sizeof a8 + sizeof ary1	; All done at assembly time (the addition too!)
mov		rbx, lengthof ary2				; Returns 10, sizeof returned 40
mov		rbx, type (a2)					; Returns 2 (bytes)

; *** EQ, LT, GT, etc.  ***
byte	type (a2) eq word				; value = 0FFh = TRUE
byte	type (a2) eq dword				; value = 0 = FALSE
byte	type (a4) lt type (a2)			; value = 0 = FALSE

; *** Typedef ***
integer			typedef word			; Typedef defines a type
Array			integer 16 dup (?)

; low, high, lowword, highword
myword			word	098F2h
hword			highword (myword)		; Should be 098h
lword			lowword (myword)		; Should be 0F2h

; *** Structures ***
stype		struct
	member1		db 5
	member2		dw 123456
stype	    ends
stype	mystruct

mov		al, mystruct.member1

; *** Conditional MASM directives ***
Asm64bit	equ 	1
Defined		db		8
op1			equ		5
op2			equ		10

IF Asm64bit eq 1
	mov rax, 0
ELSE
	mov eax, 0
ENDIF

INDEF Defined	; Checks whether it is deifned or not
	Defined db	-1
END

IFIDN op1 op2	; Check if identical
	xor rax, rax
ENDIF

IFDIF op1 op2	; If different
	xor rax, rax
ENDIF

; *** Macros ***
COPY macro Dest Source	; Parameters
	mov		rax, Source
	mov     Dest, rax
endm
; Macro codes are always inserted at points where they are referenced
; Procedure code however is wonly written once but used many times

LJE macro Dest	; Jump if equal macro
	local   SkipIt	; Prevents the error of redefinition by redefining SkipIt each time the macro is encountered. Local must come right after the macro definition
	jne     SkipIt
	jmp     Dest	; Label defined somewhere
	SkipIt:			; It will get redefined each time it is inserted in the code which results in an error.
	xor		rax, rax
	exitm			; Leaves the macro. Could be enclosed by IF statements. The text after exitm does not get copied in the code
	xor		rbx, rbx
endm

; Predefined macros
; substr 	string start length
NewStr substr Oldstr 1 3 	
; instr 	start string substr
Pos instr 2 OldStr 
; sizestr string
StrSize sizestr OldStr
; catstr 	string string ...
NewStr catstr OldStr

; *** Assembly time variables ***
@Date
@Time
@Environ (ORACLE_PATH)
@Filename



end				; Terminates the source file