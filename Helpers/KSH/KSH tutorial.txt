# ksh tutorial exercise script - Csaba Riedlinger

print "\nKSH tutorial output\n"

# Word count
wc tut.ksh # Get line, word, char count

# Arrays
set -A myarr value1 value2 value3 # Define array with init values
echo ${myarr[2]}
echo ${myarr[@]} # Get all values (space separated) at once

# Read only variable
myrovar="My read-only variable"
readonly myrovar # Read only variable, value can not be changed
echo $myrovar
#myrovar="something else" # Raises error

unset myarr # Forget about myarr
echo ${myarr[1]}

# Shell variable
export envvar1="Hello!" # Exports variable for use by child processes
./tut2.ksh # Child shell script to echo envvar1
echo $PWD # Echo a shell variable

# NVL
var0="Csacsi"
var1=${var2:-$var0} # If var2 is null or not set, use value in var0. Does not set var2, only var1
echo $var2 # Displays nothing
echo $var1

var0="Csacso"
var1=${var2:=$var0} # If var2 is null or not set, use value in var0. Sets var2 as well
echo $var2
echo $var1

thisdate=`date` # Command substitution
echo $thisdate

# Arithmetic
res=$((5+10))
echo $res

# Quoting
echo It\'s raining
echo 'We can use special chars like $*& etc.'
# Conditional branching
if cat tut.ksh > tutcopy.ksh ; then # Command test
   echo 'Copy done successfully.'
else
   echo 'copy failed.'
fi

if [ -f $HOME/tutcopy.ksh ] ; then # File test
   echo 'File exists!'
else
   echo 'File does not exist!'
fi

if [ -z "$var1" ] ; then # String test if zero length
   echo 'Var1 is empty'
else
   echo 'Var1 has chars.'
fi
if [ "$var1"="Csacso" ] ; then # String equality test
   echo 'Var1 is Csacso'
else
   echo 'Var1 is not Csacso'
fi

chmod 777 nonexistent.file
if [ $? -ne 0 ] ; then # Command exit status test
   echo 'Command errored.'
else
   echo 'Command successful.'
fi

numval1=100
numval2=101
if [ $numval1 -lt $numval2 ] ; then # Numeric values test
   echo 'Less than.'
else
   echo 'Not less than.'
fi
if [ $numval1 -lt 200 -a $numval2 -gt 100 ] ; then # Compound expression
   echo 'And satisfied.'
else
   echo 'And not satisfied.'
fi

# CASE statement
fruit=kiwi
case "$fruit" in
    apple) echo "Apple it is" ;;
    banana) echo "Banana it is" ;;
    kiwi) echo "Kiwi it is" ;;
    *) echo "Fruit not recognized" ;;
esac

# Increment counter
x=1
x=$((x+1))
echo $x

# While loop
x=1
while [ $x -le 10 ]
do
   echo $x
   x=$((x+1))
   # With the BC command
   # x=`echo "$x + 1" | bc`
done

# User input
secret=55
resp=
while [ -z "$resp" ] ;
do
    echo "Enter a number: "
    read resp
    if [ $secret -eq $resp ] ; then
        echo "Well done!"
    else
       resp=
       continue
    fi
done

# For loop
for i in 0 1 2 3 4 5 6 7 8 9
do
    echo $i
done
echo "Files in the home directory:"
for file in $HOME/*
do
   echo $file
done

# User selection
PS3="Please make a selection => " ; export PS3
select sel in comp1 comp2 comp3 all quit
do
    case $sel in
        comp1|comp2|comp3) echo "Selected: $sel" ;;
        all) echo "All selected" ;;
        quit) break ;;
        *) echo "ERROR: Invalid selection." ;;
    esac
done

# Loop control
for i in 1 2 3 4 5
do
   for j in 1 2 3 4 5
   do
      if [ $i -eq 3 -a $j -eq 2 ] ; then
         break 2 # Break 2 levels
      fi
      echo "i=$i j=$j"
   done
done

# Arguments
echo "Command executing: $0"
echo "Number of arguments supplied: $#"
echo "Parameter 1: $1"
echo "Parameter 2: $2"
echo "All params: $@"
echo "Process id: $$"
echo "Individual parameters:"
for thisparam in $@
do
   echo $thisparam
done

# Basename
bname=`basename $0`
echo "Basename: $bname"

# Option parsing

# Here document
cat <<XXX>>newfile # Keep typing that cat eats up and pushes into newfile at the same time. Type XXX to stop. I.e. give input until XXX
